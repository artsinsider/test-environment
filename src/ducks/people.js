import uid       from 'uuid/v4';import * as SE   from 'redux-saga/effects';import * as SAGA from 'redux-saga';import * as AC   from '../actions/people'import {people}  from '../staticdata/people'import {Record, List}  from 'immutable'// const ReducerRecord = Record({//     peoples: new List([]),//     loading: false// });//// const PoepleRecord = Record({//     id: null,//     name: null,//     lastName: null,//     age: null,//     sex: null,//     course: null// });const initialState = {    loading: false,    peoples: [...people],};export default function peopleReducer(state = initialState, action) {    const {type} = action;    switch (type) {        case AC.ADD_PEOPLE_START:            return  ({...state, loading: true});        case AC.ADD_PEOPLE:            return ({...state, peoples: [...state.peoples, action.data], loading: false});        case AC.ADD_PEOPLE_ERROR:            return state;        default: return state;    }}export function addPeople(user) {    return {        type: AC.ADD_PEOPLE_REQUEST,        data: {id: uid(), ...user}    }}const addPeopleSaga = function* (action) {    yield SE.put({ type: AC.ADD_PEOPLE_START });    yield SAGA.delay(1000);    yield SE.put({        type: AC.ADD_PEOPLE,        data: action.data    })};export const saga = function* () {    yield SE.takeEvery(AC.ADD_PEOPLE_REQUEST, addPeopleSaga)};